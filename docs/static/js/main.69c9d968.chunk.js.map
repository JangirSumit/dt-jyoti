{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","selectedPlan","data","event","target","value","alert","url","fetch","result","text","this","setState","document","getElementById","select","execCommand","className","id","name","onChange","selectPlan","map","p","i","key","defaultValue","onPlanChange","onClick","copyText","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAmGeA,G,MAhGf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,aAAc,eACdC,KAAM,IALS,EADrB,gGAUmBC,GAVnB,8EAakB,iBAFFA,EAAMC,OAAOC,MAX7B,uBAcMC,MAAM,eAdZ,mBAea,GAfb,cAiBQC,EAjBR,eAiBsBJ,EAAMC,OAAOC,MAjBnC,iBAkBuBG,MAAMD,GAlB7B,cAkBQE,EAlBR,iBAmB4BA,EAnB5B,gCAmBoCC,OAnBpC,QAmBQR,EAnBR,OAoBIS,KAAKC,SAAS,CACZV,KAAMA,IArBZ,mPA0BeW,SAASC,eAAe,WAC9BC,SACLF,SAASG,YAAY,QA5BzB,6KA+BqBb,GA/BrB,uEAgCQE,EAAQF,EAAMC,OAAOC,MACzBM,KAAKC,SAAS,CACZV,KAAMG,IAlCZ,sIAsCY,IAAD,OAqBP,OACE,yBAAKY,UAAU,OACb,4DACA,0CACA,2BACE,4BACEA,UAAU,QACVC,GAAG,QACHC,KAAK,QACLC,SAAU,SAACjB,GAAD,OAAW,EAAKkB,WAAWlB,KA7B/B,CACZ,eACA,WACA,OACA,UACA,QACA,YACA,YACA,QACA,cACA,QACA,cACA,YACA,SACA,YACA,YACA,YACA,aAcamB,KAAI,SAACC,EAAGC,GAAJ,OACT,4BAAQC,IAAKD,EAAGnB,MAAOkB,GACpBA,QAKT,2BACE,8BACEG,aAAcf,KAAKX,MAAME,KACzBgB,GAAG,UACHE,SAAU,SAACjB,GAAD,OAAW,EAAKwB,aAAaxB,OAG3C,4BAAQyB,QAAS,kBAAM,EAAKC,aAA5B,aACA,6BAzBF,IAyBS,6BACNlB,KAAKX,MAAME,MACV,6BACE,8BAAOS,KAAKX,MAAME,YAxF9B,GAAyB4B,cCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.69c9d968.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedPlan: \"-- select --\",\n      data: \"\",\n    };\n  }\n\n  async selectPlan(event) {\n    var value = event.target.value;\n\n    if (value === \"-- select --\") {\n      alert(\"select plan\");\n      return false;\n    }\n    var url = `data/${event.target.value}.txt`;\n    var result = await fetch(url);\n    var data = await (await result).text();\n    this.setState({\n      data: data,\n    });\n  }\n\n  async copyText() {\n    var data = document.getElementById(\"txtData\");\n    data.select();\n    document.execCommand(\"copy\");\n  }\n\n  async onPlanChange(event) {\n    var value = event.target.value;\n    this.setState({\n      data: value,\n    });\n  }\n\n  render() {\n    const plans = [\n      \"-- select --\",\n      \"Diabetes\",\n      \"PCOD\",\n      \"Thyroid\",\n      \"Heart\",\n      \"Pregnancy\",\n      \"Lectation\",\n      \"Renal\",\n      \"Renal Stone\",\n      \"Liver\",\n      \"Gluten Free\",\n      \"Arthritis\",\n      \"Asthma\",\n      \"2000 KCal\",\n      \"1200 KCal\",\n      \"1800 KCal\",\n      \"1600 KCal\",\n    ];\n\n    return (\n      <div className=\"App\">\n        <h2>Diet Plans - Dietitian Jyoti</h2>\n        <p>Select Plan</p>\n        <p>\n          <select\n            className=\"plans\"\n            id=\"plans\"\n            name=\"plans\"\n            onChange={(event) => this.selectPlan(event)}\n          >\n            {plans.map((p, i) => (\n              <option key={i} value={p}>\n                {p}\n              </option>\n            ))}\n          </select>\n        </p>\n        <p>\n          <textarea\n            defaultValue={this.state.data}\n            id=\"txtData\"\n            onChange={(event) => this.onPlanChange(event)}\n          ></textarea>\n        </p>\n        <button onClick={() => this.copyText()}>Copy text</button>\n        <br /> <br />\n        {this.state.data && (\n          <pre>\n            <code>{this.state.data}</code>\n          </pre>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}